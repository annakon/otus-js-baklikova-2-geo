{"version":3,"file":"bundle.js","mappings":";4QACA,smNACO,SAAeA,IAAtB,iEAAO,iBAAAC,EAAA,oEAEK,QADJA,EAAIC,aAAaC,QAAQ,SAD1B,yCAGI,IAHJ,gCAKEC,KAAKC,MAAMJ,EAAG,KALhB,kEASA,SAASK,EAASC,GACvBL,aAAaM,QAAQ,OAAQJ,KAAKK,UAAUF,GAC7C,CAEM,SAASG,EAASC,EAAIJ,GAC3BI,EAAGC,UAAH,UAAkBL,EAAMM,KAAI,SAACF,GAAD,wBAAmBA,EAAnB,gBAAkCG,KAAK,IACpE,oPChBD,8hGAAAC,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,0oDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,omBAEA,iBACiBC,EADjB,EAgBiBC,EAhBjB,kHAgBE,WAA2BN,EAAIO,GAA/B,UAYWC,EAZX,wEAYWA,EAZX,WAckB,IAAIC,MAAMC,IAAI,MAAO,CAKjCC,OAAQ,CAACC,EAAmBC,MAAMC,IAAKF,EAAmBC,MAAME,KAGhEC,KAAM,GAET,EAxBH,SACuCX,EAA6BE,GADpE,cACQU,EADR,gBAEmCA,EAAuBC,OAF1D,OAEQN,EAFR,OAIQO,GAAQP,EAAmBQ,KAAKD,KAAO,QAAQE,QAAQ,GAE7DrB,EAAGC,UAAH,cAAsBW,EAAmBU,KAAzC,mBAAwDH,EAAxD,+FACuEP,EAAmBW,QAAQ,GAAGC,KADrG,aAGAC,SAASC,eAAe,OAAOzB,UAAY,GAE3CQ,MAAMkB,MAAMnB,GAXd,6CAhBF,uBAgBiBF,EAhBjB,gFACE,WAA4CC,GAA5C,4EACe,KAATA,EADN,gCAE2BqB,MAAM,uCAFjC,cAEUC,EAFV,gBAGuBA,EAASX,OAHhC,cAGUA,EAHV,yBAKWU,MAAM,uDAAD,OAC6CV,EAAKY,SADlD,gBACkEZ,EAAKa,UADvE,6CALhB,gCAUSH,MAAM,qDAAD,OAC2CrB,EAD3C,6CAVd,4CADF,uBACiBF,EADjB,4CA4CQ2B,EAAOP,SAASQ,cAAc,QAC9BC,EAAST,SAASQ,cAAc,kBA7CxC,SAgDsB5C,IAhDtB,cAgDQO,EAhDR,OAmDEG,EAASmC,EAAQtC,GAEjBoC,EAAKG,iBAAiB,UAAU,SAACC,GAE/BA,EAAGC,iBAGH,IACMC,EADcF,EAAGG,OACGN,cAAc,SAChCO,EAAUF,EAAVE,MACRF,EAAME,MAAQ,GAGT5C,EAAM6C,SAASD,IAAQ5C,EAAM8C,KAAKF,GACnC5C,EAAM+C,OAAS,IAAI/C,EAAMgD,QAG7B7C,EAASmC,EAAQtC,GAGjBD,EAASC,GACTU,EAAYmB,SAASQ,cAAc,cAAeO,EACnD,IAzEH,kBA2ESlC,EAAYmB,SAASQ,cAAc,cAAe,KA3E3D,oEA8EAY,OAAOC","sources":["webpack://otus-js-baklikova-2-geo/./src/localStorage.js","webpack://otus-js-baklikova-2-geo/./src/index.js"],"sourcesContent":["// Должна возвращать список пользователя\n// Если пользователь ничего не вводил - пустой список\nexport async function readList() {\n  const a = localStorage.getItem(\"list\");\n  if (a === null) {\n    return [];\n  }\n  return JSON.parse(a, []);\n}\n\n// Сохраняет список\nexport function saveList(items) {\n  localStorage.setItem(\"list\", JSON.stringify(items));\n}\n\nexport function drawList(el, items) {\n  el.innerHTML = `${items.map((el) => `<option>${el}</option>`).join(\"\")}`;\n}\n","import \"../css/styles.css\";\nimport { readList, saveList, drawList } from \"./localStorage\";\n\nasync function init() {\n  async function returnResponseOpenweathermap(city) {\n    if (city === \"\") {\n      const response = await fetch(\"https://get.geojs.io/v1/ip/geo.json\");\n      const json = await response.json();\n\n      return fetch(\n        `https://api.openweathermap.org/data/2.5/weather?lat=${json.latitude}&lon=${json.longitude}&appid=2dd5152e26591562500eba5a006f9a67`\n      );\n    }\n\n    return fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=2dd5152e26591562500eba5a006f9a67`\n    );\n  }\n\n  async function drawWeather(el, city) {\n    const responseOpenweathermap = await returnResponseOpenweathermap(city);\n    const jsonOpenweathermap = await responseOpenweathermap.json();\n\n    const temp = (jsonOpenweathermap.main.temp - 273.15).toFixed(0);\n\n    el.innerHTML = `<h1>${jsonOpenweathermap.name}</h1><p>${temp}&deg;</p>\n                   <img alt=\"icon\" src=\"http://openweathermap.org/img/wn/${jsonOpenweathermap.weather[0].icon}@2x.png\">`;\n\n    document.getElementById(\"map\").innerHTML = \"\";\n\n    ymaps.ready(initMap);\n    function initMap() {\n      // Создание карты.\n      const myMap = new ymaps.Map(\"map\", {\n        // Координаты центра карты.\n        // Порядок по умолчанию: «широта, долгота».\n        // Чтобы не определять координаты центра карты вручную,\n        // воспользуйтесь инструментом Определение координат.\n        center: [jsonOpenweathermap.coord.lat, jsonOpenweathermap.coord.lon],\n        // Уровень масштабирования. Допустимые значения:\n        // от 0 (весь мир) до 19.\n        zoom: 7,\n      });\n    }\n  }\n\n  // Получаем указатели на нужные элементы\n  const form = document.querySelector(\"form\");\n  const listEl = document.querySelector(\"#recentResults\");\n\n  // Читаем список при старте\n  const items = await readList();\n\n  // и отрисовываем список\n  drawList(listEl, items);\n\n  form.addEventListener(\"submit\", (ev) => {\n    // чтобы не перезагружать страницу\n    ev.preventDefault();\n\n    // читаем значение из формы\n    const formElement = ev.target;\n    const input = formElement.querySelector(\"input\");\n    const { value } = input;\n    input.value = \"\";\n\n    // добавляем элемент в список\n    if (!items.includes(value)) items.push(value);\n    if (items.length > 10) items.shift();\n\n    // обновляем список\n    drawList(listEl, items);\n\n    // сохраняем список\n    saveList(items);\n    drawWeather(document.querySelector(\"#container\"), value);\n  });\n\n  return drawWeather(document.querySelector(\"#container\"), \"\");\n}\n\nwindow.init = init;\n\nexport default init;\n"],"names":["readList","a","localStorage","getItem","JSON","parse","saveList","items","setItem","stringify","drawList","el","innerHTML","map","join","i","returnResponseOpenweathermap","drawWeather","city","initMap","ymaps","Map","center","jsonOpenweathermap","coord","lat","lon","zoom","responseOpenweathermap","json","temp","main","toFixed","name","weather","icon","document","getElementById","ready","fetch","response","latitude","longitude","form","querySelector","listEl","addEventListener","ev","preventDefault","input","target","value","includes","push","length","shift","window","init"],"sourceRoot":""}