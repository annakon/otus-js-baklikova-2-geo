{"version":3,"file":"bundle.js","mappings":";4QACA,smNACO,SAAeA,IAAtB,iEAAO,iBAAAC,EAAA,oEAEK,QADJA,EAAIC,aAAaC,QAAQ,SAD1B,yCAGI,IAHJ,gCAKEC,KAAKC,MAAMJ,EAAG,KALhB,kEASA,SAASK,EAASC,GACvBL,aAAaM,QAAQ,OAAQJ,KAAKK,UAAUF,GAC7C,CAEM,SAASG,EAASC,EAAIJ,GAC3BI,EAAGC,UAAH,UAAkBL,EAAMM,KAAI,SAACF,GAAD,wBAAmBA,EAAnB,gBAAkCG,KAAK,IACpE,oPChBD,smNADO,SAAeC,EAAtB,oEAAO,WAA4CC,GAA5C,4EACQ,KAATA,EADC,gCAEoBC,MAAM,uCAF1B,cAEGC,EAFH,gBAGgBA,EAASC,OAHzB,cAGGA,EAHH,yBAKIF,MAAM,uDAAD,OAC6CE,EAAKC,SADlD,gBACkED,EAAKE,UADvE,6CALT,gCAUEJ,MAAM,qDAAD,OAC2CD,EAD3C,6CAVP,qTCCP,8hGAAAM,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,0oDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,kkBAEA,IACIf,EADEgB,EAAK,gBAGIC,EAAY,EAAZA,oEAAf,WAA2Bb,EAAIK,GAA/B,cAgCWS,EAhCX,wEAgCWA,EAhCX,WAkCkB,IAAIC,MAAMC,IAAI,MAAO,CAKjCC,OAAQ,CAACC,EAAmBC,MAAMC,IAAKF,EAAmBC,MAAME,KAGhEC,KAAM,GAET,EA5CH,SACuClB,EAA6BC,GADpE,cACQkB,EADR,gBAEmCA,EAAuBf,OAF1D,UAIiC,OAFzBU,EAFR,QAIyBM,IAJzB,wBAKIC,MAAMP,EAAmBQ,SAL7B,8BASQC,GAAQT,EAAmBU,KAAKD,KAAOf,GAAIiB,QAAQ,GAEzD7B,EAAGC,UAAH,cAAsBiB,EAAmBY,KAAzC,mBAAwDH,EAAxD,+FACyET,EAAmBa,QAAQ,GAAGC,KADvG,aAGMC,EAASC,SAASC,cAAc,kBAEzB,KAAT9B,EAhBN,kCAkBkBhB,IAlBlB,QAkBIO,EAlBJ,eAoBQwC,EAAiB,KAAT/B,EAAca,EAAmBY,KAAOzB,EAEjDT,EAAMyC,SAASD,IAAQxC,EAAM0C,KAAKF,GACnCxC,EAAM2C,OAAS,IAAI3C,EAAM4C,QAE7BzC,EAASkC,EAAQrC,GAEjBD,EAASC,GAETsC,SAASO,eAAe,OAAOxC,UAAY,GAE3Cc,MAAM2B,MAAM5B,GA/Bd,qGA+CO,qFACQoB,SAASC,cAAc,QAC/BQ,iBAAiB,UAAU,SAACC,GAE/BA,EAAGC,iBAGH,IACMC,EADcF,EAAGG,OACGZ,cAAc,SAChCC,EAAUU,EAAVV,MACRU,EAAMV,MAAQ,GAEdvB,EAAYqB,SAASC,cAAc,cAAeC,EACnD,IAbI,kBAeEvB,EAAYqB,SAASC,cAAc,cAAe,KAfpD,kEClDPa,OAAOC,KDkDA,WAAP","sources":["webpack://otus-js-baklikova-2-geo/./src/localStorage.js","webpack://otus-js-baklikova-2-geo/./src/api.js","webpack://otus-js-baklikova-2-geo/./src/init.js","webpack://otus-js-baklikova-2-geo/./src/index.js"],"sourcesContent":["// Должна возвращать список пользователя\n// Если пользователь ничего не вводил - пустой список\nexport async function readList() {\n  const a = localStorage.getItem(\"list\");\n  if (a === null) {\n    return [];\n  }\n  return JSON.parse(a, []);\n}\n\n// Сохраняет список\nexport function saveList(items) {\n  localStorage.setItem(\"list\", JSON.stringify(items));\n}\n\nexport function drawList(el, items) {\n  el.innerHTML = `${items.map((el) => `<option>${el}</option>`).join(\"\")}`;\n}\n","export async function returnResponseOpenweathermap(city) {\n  if (city === \"\") {\n    const response = await fetch(\"https://get.geojs.io/v1/ip/geo.json\");\n    const json = await response.json();\n\n    return fetch(\n      `https://api.openweathermap.org/data/2.5/weather?lat=${json.latitude}&lon=${json.longitude}&appid=2dd5152e26591562500eba5a006f9a67`\n    );\n  }\n\n  return fetch(\n    `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=2dd5152e26591562500eba5a006f9a67`\n  );\n}\n","import { readList, saveList, drawList } from \"./localStorage\";\nimport { returnResponseOpenweathermap } from \"./api\";\n\nconst T0 = 273.15;\nlet items;\n\nasync function drawWeather(el, city) {\n  const responseOpenweathermap = await returnResponseOpenweathermap(city);\n  const jsonOpenweathermap = await responseOpenweathermap.json();\n\n  if (jsonOpenweathermap.cod !== 200) {\n    alert(jsonOpenweathermap.message);\n    return;\n  }\n\n  const temp = (jsonOpenweathermap.main.temp - T0).toFixed(0);\n\n  el.innerHTML = `<h1>${jsonOpenweathermap.name}</h1><p>${temp}&deg;</p>\n                   <img alt=\"icon\" src=\"http://openweathermap.org/img/wn/${jsonOpenweathermap.weather[0].icon}@2x.png\">`;\n\n  const listEl = document.querySelector(\"#recentResults\");\n\n  if (city === \"\") {\n    // Читаем список при старте\n    items = await readList();\n  }\n  const value = city === \"\" ? jsonOpenweathermap.name : city;\n  // добавляем элемент в список\n  if (!items.includes(value)) items.push(value);\n  if (items.length > 10) items.shift();\n  // обновляем список\n  drawList(listEl, items);\n  // сохраняем список\n  saveList(items);\n\n  document.getElementById(\"map\").innerHTML = \"\";\n\n  ymaps.ready(initMap);\n  function initMap() {\n    // Создание карты.\n    const myMap = new ymaps.Map(\"map\", {\n      // Координаты центра карты.\n      // Порядок по умолчанию: «широта, долгота».\n      // Чтобы не определять координаты центра карты вручную,\n      // воспользуйтесь инструментом Определение координат.\n      center: [jsonOpenweathermap.coord.lat, jsonOpenweathermap.coord.lon],\n      // Уровень масштабирования. Допустимые значения:\n      // от 0 (весь мир) до 19.\n      zoom: 7,\n    });\n  }\n}\n\nexport async function init() {\n  const form = document.querySelector(\"form\");\n  form.addEventListener(\"submit\", (ev) => {\n    // чтобы не перезагружать страницу\n    ev.preventDefault();\n\n    // читаем значение из формы\n    const formElement = ev.target;\n    const input = formElement.querySelector(\"input\");\n    const { value } = input;\n    input.value = \"\";\n\n    drawWeather(document.querySelector(\"#container\"), value);\n  });\n\n  return drawWeather(document.querySelector(\"#container\"), \"\");\n}\n","import \"../css/styles.css\";\nimport { init } from \"./init\";\n\nwindow.init = init;\n\nexport default init;\n"],"names":["readList","a","localStorage","getItem","JSON","parse","saveList","items","setItem","stringify","drawList","el","innerHTML","map","join","returnResponseOpenweathermap","city","fetch","response","json","latitude","longitude","i","T0","drawWeather","initMap","ymaps","Map","center","jsonOpenweathermap","coord","lat","lon","zoom","responseOpenweathermap","cod","alert","message","temp","main","toFixed","name","weather","icon","listEl","document","querySelector","value","includes","push","length","shift","getElementById","ready","addEventListener","ev","preventDefault","input","target","window","init"],"sourceRoot":""}